/*
 * ***************************************************************************
 *   Copyright 2016-2017 Spectra Logic Corporation. All Rights Reserved.
 *   Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *   this file except in compliance with the License. A copy of the License is located at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file.
 *   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *   CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *   specific language governing permissions and limitations under the License.
 * ***************************************************************************
 */

package com.spectralogic.tpfr.client

import com.spectralogic.tpfr.client.model.*
import java.util.*

interface TpfrClient {

    /**
     * This method will block while the index is created and will only return when either the index file has been created or for some reason it has not been possible to create the index file.
     * The Web Service will support multiple concurrent calls to this command.
     * @param filePath The full UNC path to the media file to be indexed.
     * @param indexId The unique identifier for the source file. This will be used as the reference for this file throughout the following.
     * @return IndexStatus
     */
    suspend fun indexFile(filePath: String, indexId: UUID): IndexStatus

    /**
     * This method will block while retrieving the index status for a previously indexed file.
     * This method internally uses an XML file, generated by the indexer to retrieve the detailed status.
     * The Web Service will support multiple concurrent calls to this API call.
     * @param indexId The unique identifier for the source file.
     * @return IndexStatus
     */
    suspend fun fileStatus(indexId: UUID): IndexStatus

    /**
     * This method will block whilst retrieving the start and end byte offsets for the requested timecodes. The offsets are extended in order to handle GOP and interleave ordering.
     * If the tcout requests the last frame or beyond from the source the return will give ‘0xffffffffffffffff’.
     * @param params @see [QuestionTimecodeParams]
     * @return OffsetsStatus
     */
    suspend fun questionTimecode(params: QuestionTimecodeParams): OffsetsStatus

    /**
     * This method will use the parameters supplied to generate a Marquis XML file that will be used to create the partial output file.
     * @param params @See [ReWrapParams]
     * @return ReWrapResponse
     */
    suspend fun reWrap(params: ReWrapParams): ReWrapResponse

    /**
     * This method will return status (% complete) for the creation of a partial media file initiated using the Partial File Request API call.
     * @param targetFileName The UNC path to the new partial movie file.
     * @return ReWrapStatus
     */
    suspend fun reWrapStatus(targetFileName: String): ReWrapStatus
}