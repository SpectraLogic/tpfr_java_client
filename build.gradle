/*
 * ***************************************************************************
 *   Copyright 2016-2017 Spectra Logic Corporation. All Rights Reserved.
 *   Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *   this file except in compliance with the License. A copy of the License is located at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file.
 *   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *   CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *   specific language governing permissions and limitations under the License.
 * ***************************************************************************
 */

buildscript {
    ext.kotlin_version = '1.2.70'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

allprojects {
    group = 'com.spectralogic.tpfr'
    version = '0.1.0-SNAPSHOT'
}

subprojects {
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'java'
    apply plugin: 'kotlin'

    sourceCompatibility = JavaVersion.VERSION_1_8

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()
    }

    kotlin { experimental { coroutines 'enable' } }

    dependencyUpdates.resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-nio:$kotlin_coroutine_version"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$kotlin_coroutine_version"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:$kotlin_coroutine_version"

        compile "org.slf4j:slf4j-api:$slf4j_version"

        compile "ch.qos.logback:logback-core:$logback_version"
        compile "ch.qos.logback:logback-classic:$logback_version"

        compile "com.squareup.retrofit2:retrofit:$retrofit_version"
        compile "com.squareup.retrofit2:converter-simplexml:$retrofit_version"
        compile "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"
        compile "com.squareup.okhttp3:okhttp:$okhttp3_version"
        compile "com.squareup.okhttp:mockwebserver:$okhttp_version"

        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_datatype_version"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:$jackson_datatype_version"

        compile "org.apache.directory.studio:org.apache.commons.io:$apache_commons_io_version"

        compile "net.wuerl.kotlin:assertj-core-kotlin:$assertj_kotlin_version"

        testCompile "junit:junit:$junit_version"
        testCompile "org.hamcrest:hamcrest-core:$hamcrest_version"
        testCompile "org.assertj:assertj-core:$assertj_version"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}

project(":client") {
    dependencies {
        compile project(":api")
    }
}

project(":integration") {
    dependencies {
        compile project(":client")
    }
}